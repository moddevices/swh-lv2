@prefix : <http://lv2plug.in/ns/lv2core#> .
@prefix swh: <http://plugin.org.uk/swh-plugins/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix swhext: <http://plugin.org.uk/extensions#> .
@prefix pg: <http://lv2plug.in/ns/ext/port-groups#> .
@prefix pprops: <http://lv2plug.in/ns/ext/port-props#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix units: <http://lv2plug.in/ns/extensions/units#> .
@prefix epp: <http://lv2plug.in/ns/ext/port-props/#>.
@prefix time: <http://lv2plug.in/ns/ext/time/#>.
@prefix mod: <http://portalmod.com/ns/modgui#>.

swh:diode a :Plugin ;
   a :DistortionPlugin ;

   doap:name "Diode Processor" ;
   doap:maintainer [
      foaf:name "Steve Harris";
      foaf:homepage <http://plugin.org.uk/> ;
      foaf:mbox <mailto:steve@plugin.org.uk> ;
   ] ;
   doap:license <http://usefulinc.com/doap/licenses/gpl> ;
   :documentation <http://plugin.org.uk/ladspa-swh/docs/ladspa-swh.html#diode> ;

   :pluginProperty :hardRtCapable ;
    
   :port [
     a :InputPort, :ControlPort ;
     :name "Mode (0 for none, 1 for half wave, 2 for full wave)" ;
     :index 0 ;
     :symbol "mode" ;
     :minimum 0 ;
     :maximum 3 ;
     :default 0.0 ;
   ] ;
  
   :port [
     a :InputPort, :AudioPort ;
     :name "Input" ;
     :index 1 ;
     :symbol "input" ;
   ] ;
  
   :port [
     a :OutputPort, :AudioPort ;
     :name "Output" ;
     :index 2 ;
     :symbol "output" ;
   ] ;
  
   swhext:callback [
     swhext:event "run" ;
     swhext:code """
unsigned long pos;

if (mode >= 0.0f && mode < 1.0f) {
	for (pos = 0; pos < sample_count; pos++) {
		output[pos] = ((1.0f-mode) * input[pos]) +
		 (mode * (input[pos] > 0.0f ? input[pos] : 0.0f));
	}
} else if (mode >= 1.0f && mode < 2.0f) {
	float fac = mode - 1.0f;
	for (pos = 0; pos < sample_count; pos++) {
		output[pos] =((1.0f-fac) * (input[pos] > 0 ?
		 input[pos] : 0.0)) + (fac * fabs(input[pos]));
	}
} else if (mode >= 2) {
	float fac = mode < 3 ? mode - 2 : 1.0;
	for (pos = 0; pos < sample_count; pos++) {
		output[pos] = (1.0-fac) * fabs(input[pos]);
	}
} else {
	for (pos = 0; pos < sample_count; pos++) {
		output[pos] = input[pos];
	}
}
		""" ;
   ] ;
  
   swhext:createdBy <http://plugin.org.uk/swh-plugins/toTurtle.xsl> ;
   mod:gui [
        a mod:Gui;
        mod:resourcesDirectory <modgui>;
        mod:iconTemplate <modgui/icon-diode-processor.html>;
        mod:templateData <modgui/data-diode-processor.json>;
        mod:screenshot <modgui/screenshot-diode-processor.png>;
        mod:thumbnail <modgui/thumb-diode-processor.png>;
    ] .
