@prefix : <http://lv2plug.in/ns/lv2core#> .
@prefix swh: <http://plugin.org.uk/swh-plugins/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix swhext: <http://plugin.org.uk/extensions#> .
@prefix pg: <http://lv2plug.in/ns/ext/port-groups#> .
@prefix pprops: <http://lv2plug.in/ns/ext/port-props#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix units: <http://lv2plug.in/ns/extensions/units#> .
@prefix epp: <http://lv2plug.in/ns/ext/port-props/#>.
@prefix time: <http://lv2plug.in/ns/ext/time/#>.
@prefix mod: <http://moddevices.com/ns/modgui#>.

swh:chebstortion a :Plugin ;
   a :DistortionPlugin ;

   doap:name "Chebyshev distortion" ;
   doap:maintainer [
      foaf:name "Steve Harris";
      foaf:homepage <http://plugin.org.uk/> ;
      foaf:mbox <mailto:steve@plugin.org.uk> ;
   ] ;
   doap:license <http://usefulinc.com/doap/licenses/gpl> ;
   :documentation <http://plugin.org.uk/ladspa-swh/docs/ladspa-swh.html#chebstortion> ;

   :pluginProperty :hardRtCapable ;
    
   :port [
     a :InputPort, :ControlPort ;
     :name "Distortion" ;
     :index 0 ;
     :symbol "dist" ;
     :minimum 0 ;
     :maximum 3 ;
     :default 0.0 ;
   ] ;
  
   :port [
     a :InputPort, :AudioPort ;
     :name "Input" ;
     :index 1 ;
     :symbol "input" ;
     :minimum -1 ;
     :maximum +1 ;
   ] ;
  
   :port [
     a :OutputPort, :AudioPort ;
     :name "Output" ;
     :index 2 ;
     :symbol "output" ;
     :minimum -1 ;
     :maximum +1 ;
   ] ;
  
   swhext:code """
      #include <ladspa-util.h>

      #define HARMONICS 11
      #define STAGES 2

      static float cd_lut[STAGES][HARMONICS];

      /* Calculate Chebychev coefficents from partial magnitudes, adapted from
       * example in Num. Rec. */
      void chebpc(float c[], float d[])
      {
          int k, j;
          float sv, dd[HARMONICS];
      
          for (j = 0; j < HARMONICS; j++) {
              d[j] = dd[j] = 0.0;
          }
      
          d[0] = c[HARMONICS - 1];
      
          for (j = HARMONICS - 2; j >= 1; j--) {
              for (k = HARMONICS - j; k >= 1; k--) {
                  sv = d[k];
                  d[k] = 2.0 * d[k - 1] - dd[k];
                  dd[k] = sv;
              }
              sv = d[0];
              d[0] = -dd[0] + c[j];
              dd[0] = sv;
          }
      
          for (j = HARMONICS - 1; j >= 1; j--) {
              d[j] = d[j - 1] - dd[j];
          }
          d[0] = -dd[0] + 0.5 * c[0];
      }

    """ ;

   swhext:callback [
     swhext:event "instantiate" ;
     swhext:code """
      unsigned int i;

      cd_lut[0][0] = 0.0f;
      cd_lut[0][1] = 1.0f;
      for (i=2; i<HARMONICS; i++) {
        cd_lut[0][i] = 0.0f;
      }
      cd_lut[1][0] = 0.0f;
      cd_lut[1][1] = 1.0f;
      for (i=2; i<HARMONICS; i++) {
        cd_lut[1][i] = 1.0f/(float)i;
      }

      itm1 = 0.0f;
      otm1 = 0.0f;
      env = 0.0f;
      count = 0;
    """ ;
   ] ;
  
   swhext:callback [
     swhext:event "activate" ;
     swhext:code """
      itm1 = 0.0f;
      otm1 = 0.0f;
      env = 0.0f;
      count = 0;
    """ ;
   ] ;
  
   swhext:callback [
     swhext:event "run" ;
     swhext:code """
      unsigned long pos, i;
      float p[HARMONICS], interp[HARMONICS];

      for (pos = 0; pos < sample_count; pos++) {
        const float x = input[pos];
        const float a = fabs(input[pos]);
	float y;

	if (a > env) {
		env = env * 0.9f + a * 0.1f;
	} else {
		env = env * 0.97f + a * 0.03f;
	}

	if (count-- == 0) {
	  for (i=0; i<HARMONICS; i++) {
	    interp[i] = cd_lut[0][i] * (1.0f - env * dist) +
                        cd_lut[1][i] * env * dist;
	  }
	  chebpc(interp, p);

	  count = 4;
	}

        // Evaluate the polynomial using Horner's Rule
	y = p[0] + (p[1] + (p[2] + (p[3] + (p[4] + (p[5] + (p[6] + (p[7] +
            (p[8] + (p[9] + p[10] * x) * x) * x) * x) * x) * x) * x) * x) *
            x) * x;

	// DC offset remove (odd harmonics cause DC offset)
        otm1 = 0.999f * otm1 + y - itm1;
        itm1 = y;

        buffer_write(output[pos], otm1);
      }

      plugin_data->itm1 = itm1;
      plugin_data->otm1 = otm1;
      plugin_data->env = env;
      plugin_data->count = count;
    """ ;
   ] ;
  
   swhext:createdBy <http://plugin.org.uk/swh-plugins/toTurtle.xsl> ;
   mod:gui [
        a mod:Gui;
        mod:resourcesDirectory <modgui>;
        mod:iconTemplate <modgui/icon-chebyshev-distortion.html>;
        mod:templateData <modgui/data-chebyshev-distortion.json>;
        mod:screenshot <modgui/screenshot-chebyshev-distortion.png>;
        mod:thumbnail <modgui/thumb-chebyshev-distortion.png>;
    ] .
