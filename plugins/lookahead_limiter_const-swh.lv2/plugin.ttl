@prefix : <http://lv2plug.in/ns/lv2core#> .
@prefix swh: <http://plugin.org.uk/swh-plugins/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix swhext: <http://plugin.org.uk/extensions#> .
@prefix pg: <http://lv2plug.in/ns/ext/port-groups#> .
@prefix pprops: <http://lv2plug.in/ns/ext/port-props#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix units: <http://lv2plug.in/ns/extensions/units#> .
@prefix epp: <http://lv2plug.in/ns/ext/port-props/#>.
@prefix time: <http://lv2plug.in/ns/ext/time/#>.
@prefix mod: <http://portalmod.com/ns/modgui#>.

swh:lookaheadLimiterConst a :Plugin ;
   a :LimiterPlugin ;

   doap:name "Lookahead limiter (fixed latency)" ;
   doap:maintainer [
      foaf:name "Steve Harris";
      foaf:homepage <http://plugin.org.uk/> ;
      foaf:mbox <mailto:steve@plugin.org.uk> ;
   ] ;
   doap:license <http://usefulinc.com/doap/licenses/gpl> ;
   :documentation <http://plugin.org.uk/ladspa-swh/docs/ladspa-swh.html#lookaheadLimiterConst> ;

   :pluginProperty :hardRtCapable ;
    
   :port [
     a :InputPort, :ControlPort ;
     :name "Limit (dB)" ;
     :index 0 ;
     :symbol "limit" ;
     :minimum -20 ;
     :maximum 0 ;
     :default 0.0 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Lookahead time (s)" ;
     :index 1 ;
     :symbol "delay_s" ;
     :minimum 0.001 ;
     :maximum 0.15 ;
     :default 0.0755 ;
   ] ;
  
   :port [
     a :OutputPort, :ControlPort ;
     :name "Attenuation (dB)" ;
     :index 2 ;
     :symbol "attenuation" ;
     :minimum 0 ;
     :maximum 12 ;
   ] ;
  
   :port [
     a :InputPort, :AudioPort ;
     :name "Input 1" ;
     :index 3 ;
     :symbol "in_1" ;
   ] ;
  
   :port [
     a :InputPort, :AudioPort ;
     :name "Input 2" ;
     :index 4 ;
     :symbol "in_2" ;
   ] ;
  
   :port [
     a :OutputPort, :AudioPort ;
     :name "Output 1" ;
     :index 5 ;
     :symbol "out_1" ;
   ] ;
  
   :port [
     a :OutputPort, :AudioPort ;
     :name "Output 2" ;
     :index 6 ;
     :symbol "out_2" ;
   ] ;
  
   :port [
     a :OutputPort, :ControlPort ;
     :name "latency" ;
     :index 7 ;
     :symbol "latency" ;
     :portProperty :reportsLatency ;
   ] ;
  
   swhext:code """
      #include "ladspa-util.h"
      #include "util/db.h"

      /* Minimum buffer size in seconds */
      #define BUFFER_TIME 0.15f
    """ ;

   swhext:callback [
     swhext:event "instantiate" ;
     swhext:code """
      buffer_len = 4096;
      buffer_pos = 0;
      fs = s_rate;

      db_init();

      /* Find size for power-of-two interleaved delay buffer */
      while(buffer_len < s_rate * BUFFER_TIME) {
	buffer_len *= 2;
      }
      buffer_mask = buffer_len * 2 - 1;
      buffer = calloc(buffer_len * 2, sizeof(LADSPA_Data));
      amp_buffer = calloc(buffer_len, sizeof(float));

      peak = 0.0f;
      peak_dist = 1;
      atten = 0.0f;
      last_delay = -1.0f;
    """ ;
   ] ;
  
   swhext:callback [
     swhext:event "activate" ;
     swhext:code """
      int i;

      memset(buffer, 0, buffer_len * 2 * sizeof(float));
      for (i=0; i<buffer_len; i++) amp_buffer[i] = 1.0f;

      buffer_pos = 0;
      peak = 0.0f;
      peak_dist = 1;
      atten = 0.0f;
      last_delay = -1.0f;
    """ ;
   ] ;
  
   swhext:callback [
     swhext:event "run" ;
     swhext:code """
      unsigned long pos;
      const float max = DB_CO(limit);
      float sig, gain;
      float delay = last_delay;
      float delay_delta;
      float a, b;

      if (delay < 0.0f) {
	delay = delay_s * fs;
	delay_delta = 0.0f;
      } else {
        delay_delta = (delay_s * fs - last_delay) / (sample_count - 1);
      }

      for (pos = 0; pos < sample_count; pos++) {
	delay += delay_delta;
	buffer[(buffer_pos * 2) & buffer_mask] = in_1[pos];
	buffer[(buffer_pos * 2 + 1) & buffer_mask] = in_2[pos];

        a = fabs(buffer[((buffer_pos + f_round(delay)) * 2) & buffer_mask]);
        b = fabs(buffer[((buffer_pos + f_round(delay)) * 2 + 1) & buffer_mask]);
        sig = a > b ? a : b;
/* XXX
        sig = fabs(in_1[pos]) > fabs(in_2[pos]) ? fabs(in_1[pos]) :
                fabs(in_2[pos]);
*/

        if (sig > max) {
          const float rel = lin2db(sig) - limit;

          if (rel / delay > peak / (float)peak_dist) {
            peak_dist = delay;
            peak = rel;
          }
        }

	/* Incremenatlly approach the correct attenuation for the next peak */
	atten -= (atten - peak) / (float)(peak_dist + 1);

	if (peak_dist-- == 0) {
		peak_dist = f_round(delay);
		peak = 0.0f;
	}

	/* Cacluate the apropriate gain reduction and write it back into the
	 * buffer */
	gain = amp_buffer[(buffer_pos - f_round(delay)) & (buffer_len - 1)];
	amp_buffer[(buffer_pos - f_round(delay)) & (buffer_len - 1)] =
					 1.0f / db2lin(atten);

gain=1.0f / db2lin(atten);

        buffer_write(out_1[pos], buffer[(2 * (buffer_pos + 1)) &
                                        buffer_mask] * gain);
        buffer_write(out_2[pos], buffer[(2 * (buffer_pos + 1)+1) &
                                        buffer_mask] * gain);

	/* Ensure that the signal really can't be over the limit */

#if 0
XXX FIXME XXX
	if (out_1[pos] < -max) {
	  buffer_write(out_1[pos], -max);
	} else if (out_1[pos] > max) {
	  buffer_write(out_1[pos], max);
	}
	if (out_2[pos] < -max) {
	  buffer_write(out_2[pos], -max);
	} else if (out_2[pos] > max) {
	  buffer_write(out_2[pos], max);
	}
#endif

	buffer_pos++;
      }

      plugin_data->buffer_pos = buffer_pos;
      plugin_data->peak = peak;
      plugin_data->peak_dist = peak_dist;
      plugin_data->atten = atten;
      plugin_data->last_delay = delay;

      *(plugin_data->attenuation) = atten;
      *(plugin_data->latency) = buffer_len - 1;
    """ ;
   ] ;
  
   swhext:callback [
     swhext:event "cleanup" ;
     swhext:code """
       free(plugin_data->buffer);
       free(plugin_data->amp_buffer);
    """ ;
   ] ;
  
   swhext:createdBy <http://plugin.org.uk/swh-plugins/toTurtle.xsl> ;
   mod:gui [
        a mod:Gui;
        mod:resourcesDirectory <modgui>;
        mod:iconTemplate <modgui/icon-lookahead-limiter-fixed-latency.html>;
        mod:templateData <modgui/data-lookahead-limiter-fixed-latency.json>;
        mod:screenshot <modgui/screenshot-lookahead-limiter-fixed-latency.png>;
        mod:thumbnail <modgui/thumb-lookahead-limiter-fixed-latency.png>;
    ] .
