@prefix : <http://lv2plug.in/ns/lv2core#> .
@prefix swh: <http://plugin.org.uk/swh-plugins/> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix swhext: <http://plugin.org.uk/extensions#> .
@prefix pg: <http://lv2plug.in/ns/ext/port-groups#> .
@prefix pprops: <http://lv2plug.in/ns/ext/port-props#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix units: <http://lv2plug.in/ns/extensions/units#> .
@prefix epp: <http://lv2plug.in/ns/ext/port-props/#>.
@prefix time: <http://lv2plug.in/ns/ext/time/#>.
@prefix mod: <http://portalmod.com/ns/modgui#>.

swh:delayorama a :Plugin ;
   a :DelayPlugin ;

   doap:name "Delayorama" ;
   doap:maintainer [
      foaf:name "Steve Harris";
      foaf:homepage <http://plugin.org.uk/> ;
      foaf:mbox <mailto:steve@plugin.org.uk> ;
   ] ;
   doap:license <http://usefulinc.com/doap/licenses/gpl> ;
   :documentation <http://plugin.org.uk/ladspa-swh/docs/ladspa-swh.html#delayorama> ;
   
rdfs:comment """
Random seed: Controls the random numbers that will be used to stagger the delays and amplitudes if random is turned up on them. Changing this forces the random values to be recalulated.
Input gain (dB): Controls the gain of the input signal in dB's.
Feedback (%): Controls the amount of output signal fed back into the input.
Number of taps: Controls the number of taps in the delay.
First delay (s): The time of the first delay.
Delay range (s): The time difference between the first and last delay.
Delay change: The scaling factor between one delay and the next.
Delay random (%): The random factor applied to the delay.
Amplitude change: The scaling factor between one amplitude and the next.
Amplitude random (%): The random factor applied to the amplitude.
Dry/wet mix: The level of delayed sound mixed into the output.

source: http://plugin.org.uk/ladspa-swh/docs/ladspa-swh.html#tth_sEc2.31
""";

   :port [
     a :InputPort, :ControlPort ;
     :name "Random seed" ;
     :index 0 ;
     :symbol "seed" ;
     :minimum 0 ;
     :maximum 1000 ;
     :default 0.0 ;
     :portProperty :integer ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Input gain" ;
     :index 1 ;
     :symbol "gain" ;
     units:unit units:db ;
     :minimum -96 ;
     :maximum +24 ;
     :default 0.0 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Feedback" ;
     :index 2 ;
     :symbol "feedback_pc" ;
     units:unit units:pc ;
     :minimum 0 ;
     :maximum 100 ;
     :default 0.0 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Number of taps" ;
     :index 3 ;
     :symbol "tap_count" ;
     :minimum 2 ;
     :maximum 128 ;
     :default 2 ;
     :portProperty :integer ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "First delay" ;
     :index 4 ;
     :symbol "first_delay" ;
     units:unit units:s ;
     :minimum 0 ;
     :maximum 5 ;
     :default 0.0 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Delay range" ;
     :index 5 ;
     :symbol "delay_range" ;
     units:unit units:s ;
     :minimum 0.0001 ;
     :maximum 6 ;
     :default 6 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Delay change" ;
     :index 6 ;
     :symbol "delay_scale" ;
     :minimum 0.2 ;
     :maximum 5 ;
     :default 1.0 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Delay random" ;
     :index 7 ;
     :symbol "delay_rand_pc" ;
     units:unit units:pc ;
     :minimum 0 ;
     :maximum 100 ;
     :default 0.0 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Amplitude change" ;
     :index 8 ;
     :symbol "gain_scale" ;
     :minimum 0.2 ;
     :maximum 5 ;
     :default 1.0 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Amplitude random" ;
     :index 9 ;
     :symbol "gain_rand_pc" ;
     units:unit units:pc ;
     :minimum 0 ;
     :maximum 100 ;
     :default 0.0 ;
   ] ;
  
   :port [
     a :InputPort, :ControlPort ;
     :name "Dry/wet mix" ;
     :index 10 ;
     :symbol "wet" ;
     :minimum 0 ;
     :maximum 1 ;
     :default 1.0 ;
   ] ;
  
   :port [
     a :InputPort, :AudioPort ;
     :name "Input" ;
     :index 11 ;
     :symbol "input" ;
   ] ;
  
   :port [
     a :OutputPort, :AudioPort ;
     :name "Output" ;
     :index 12 ;
     :symbol "output" ;
   ] ;
  
   swhext:code """
      #include <string.h>
      #include "ladspa-util.h"

      #define N_TAPS 128

      typedef struct {
        unsigned int delay;
        float gain;
      } tap;
    """ ;

   swhext:callback [
     swhext:event "instantiate" ;
     swhext:code """
      sample_rate = s_rate;

      buffer_pos = 0;

      buffer_size = 6.0f * sample_rate;

      taps = malloc(2 * sizeof(tap *));
      taps[0] = calloc(N_TAPS, sizeof(tap));
      taps[1] = calloc(N_TAPS, sizeof(tap));
      active_set = 0;
      next_set = 1;

      buffer = calloc(buffer_size, sizeof(LADSPA_Data));

      last_out = 0.0f;

      last_ampsc = 0.0f;
      last_delaysc = 0.0f;
      last_start = 0;
      last_range = 0;
      last_ntaps = 0;
      last_seed = 0;
      last_a_rand = 0;
      last_d_rand = 0;
    """ ;
   ] ;
  
   swhext:callback [
     swhext:event "activate" ;
     swhext:code """
      memset(buffer, 0, buffer_size * sizeof(LADSPA_Data));

      last_out = 0.0f;
      last_ampsc = 0.0f;
      last_delaysc = 0.0f;
      last_start = 0;
      last_range = 0;
      last_ntaps = 0;
      last_seed = 0;
      last_a_rand = 0;
      last_d_rand = 0;
    """ ;
   ] ;
  
   swhext:callback [
     swhext:event "cleanup" ;
     swhext:code """
      free(plugin_data->taps[0]);
      free(plugin_data->taps[1]);
      free(plugin_data->taps);
      free(plugin_data->buffer);
    """ ;
   ] ;
  
   swhext:callback [
     swhext:event "run" ;
     swhext:code """
      unsigned long pos;
      float coef = DB_CO(gain);
      unsigned int i;
      unsigned int recalc = 0;
      unsigned int ntaps = LIMIT(f_round(tap_count), 2, N_TAPS);
      float range = f_clamp(delay_range * sample_rate, 0.0f,
				(float)(buffer_size-1));
      LADSPA_Data out;
      float xfade = 0.0f;

      const float feedback = feedback_pc * 0.01f;
      const float gain_rand = gain_rand_pc * 0.01f;
      const float delay_rand = delay_rand_pc * 0.01f;


      if (ntaps != last_ntaps) {
        recalc = 1;
        plugin_data->last_ntaps = ntaps;
      }
      if (first_delay != last_start) {
        recalc = 1;
        plugin_data->last_start = first_delay;
      }
      if (range != last_range) {
        recalc = 1;
        plugin_data->last_range = range;
      }
      if (delay_scale != last_delaysc) {
        recalc = 1;
        plugin_data->last_delaysc = delay_scale;
      }
      if (gain_scale != last_ampsc) {
        recalc = 1;
        plugin_data->last_ampsc = gain_scale;
      }
      if (seed != last_seed) {
        recalc = 1;
        plugin_data->last_seed = seed;
      }
      if (gain_rand != last_a_rand) {
        recalc = 1;
        plugin_data->last_a_rand = gain_rand;
      }
      if (delay_rand != last_d_rand) {
        recalc = 1;
        plugin_data->last_d_rand = delay_rand;
      }

      if (recalc) {
        float delay_base = first_delay * sample_rate;
        float delay_fix;
        float gain, delay, delay_sum;
	float d_rand, g_rand;

	srand(f_round(seed));
        if (delay_base + range > buffer_size-1) {
          delay_base = buffer_size - 1 - range;
        }

	if (gain_scale <= 1.0f) {
          gain = 1.0f;
	} else {
          gain = 1.0f / pow(gain_scale, ntaps-1);
        }

	if (delay_scale == 1.0f) {
		delay_fix = range / (ntaps - 1);
	} else {
		delay_fix = range * (delay_scale - 1.0f) / (pow(delay_scale, ntaps - 1) - 1.0f);
	}
        delay = 1.0f;
	delay_sum = 0.0f;

        for (i=0; i<ntaps; i++) {
	  g_rand = (1.0f-gain_rand) + (float)rand() / (float)RAND_MAX * 2.0f * gain_rand;
	  d_rand = (1.0f-delay_rand) + (float)rand() / (float)RAND_MAX * 2.0f * delay_rand;
          taps[next_set][i].delay = LIMIT((unsigned int)(delay_base + delay_sum * delay_fix * d_rand), 0, buffer_size-1);
          taps[next_set][i].gain = gain * g_rand;

          delay_sum += delay;
          delay *= delay_scale;
	  gain *= gain_scale;
        }
        for (; i<N_TAPS; i++) {
	  taps[next_set][i].delay = 0.0f;
	  taps[next_set][i].gain = 0.0f;
        }
      }

      out = last_out;
      for (pos = 0; pos < sample_count; pos++) {
        buffer[buffer_pos] = input[pos] * coef + (out * feedback);

        out = 0.0f;
        for (i=0; i<ntaps; i++) {
          int p = buffer_pos - taps[active_set][i].delay;
          if (p<0) p += buffer_size;
          out += buffer[p] * taps[active_set][i].gain;
        }

        if (recalc) {
	  xfade += 1.0f / (float)sample_count;
          out *= (1-xfade);
          for (i=0; i<ntaps; i++) {
            int p = buffer_pos - taps[next_set][i].delay;
            if (p<0) p += buffer_size;
            out += buffer[p] * taps[next_set][i].gain * xfade;
          }
        }

        buffer_write(output[pos], LIN_INTERP(wet, input[pos], out));

	if (++buffer_pos >= buffer_size) {
          buffer_pos = 0;
        }
      }

      if (recalc) {
	plugin_data->active_set = next_set;
	plugin_data->next_set = active_set;
      }

      plugin_data->buffer_pos = buffer_pos;
      plugin_data->last_out = out;
    """ ;
   ] ;
  
   swhext:createdBy <http://plugin.org.uk/swh-plugins/toTurtle.xsl> ;
   mod:gui [
        a mod:Gui;
        mod:resourcesDirectory <modgui>;
        mod:stylesheet <modgui/delayorama.css>;
        mod:iconTemplate <modgui/icon-delayorama.html>;
        mod:templateData <modgui/data-delayorama.json>;
        mod:screenshot <modgui/screenshot-delayorama.png>;
        mod:thumbnail <modgui/thumb-delayorama.png>;
    ] .
